use serenity::model::Colour;

pub fn get_colour_identity(colour_id: Vec<String>) -> Colour {
    let colour_id = colour_id.join("");
    let (r, g, b) = get_colour_num(&colour_id);

    Colour::from_rgb(r, g, b)
}

fn get_colour_num(colour: &str) -> (u8, u8, u8) {
    match colour {
        "R" => (220, 20, 60),
        "G" => (34, 139, 34),
        "U" => (0x04, 0x92, 0xC2),
        "W" => (240, 230, 210),
        "B" => (22, 13, 8),
        "UW" => (0x95, 0xB9, 0xDB),
        "BU" => (0x05, 0x01, 0x4A),
        "BR" => (0x46, 0, 0),
        "GR" => (0x89, 0x51, 0x29),
        "GW" => (0x98, 0xC3, 0x77),
        "BW" => (0x44, 0x44, 0x44),
        "RU" => (0x9D, 0x00, 0xFF),
        "BG" => (0x06, 0x40, 0x2B),
        "RW" => (0xD9, 0x54, 0x4D),
        "GU" => (0x00, 0xB3, 0xB3),
        "BUW" => (0x36, 0x55, 0x63),
        "BRU" => (0x34, 0x15, 0x39),
        "BGR" => (0x50, 0x37, 0x30),
        "GRW" => (0xE5, 0x9B, 0x5A),
        "GUW" => (0x81, 0xFF, 0xFF),
        "BGW" => (0x74, 0x93, 0x6A),
        "RUW" => (0xF9, 0x48, 0xED),
        "BGU" => (0x00, 0x41, 0x41),
        "BRW" => (0xA0, 0x6E, 0x69),
        "GRU" => (0x8F, 0x79, 0xA1),
        "BGRUW" => (0xFF, 0xFF, 0xFF),
        "" => (0xA9, 0xA9, 0xA9),
        _ => (0xF9, 0xC7, 0x4F),
    }
}
