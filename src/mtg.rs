use std::collections::HashMap;
use serde::Deserialize;

pub mod search;

#[derive(Deserialize, Clone, Debug)]
struct Legalities {
    alchemy: String,
    brawl: String,
    commander: String,
    duel: String,
    explorer: String,
    future: String,
    gladiator: String,
    historic: String,
    legacy: String,
    modern: String,
    oathbreaker: String,
    oldschool: String,
    pauper: String,
    paupercommander: String,
    penny: String,
    pioneer: String,
    predh: String,
    premodern: String,
    standard: String,
    standardbrawl: String,
    timeless: String,
    vintage: String,
}

#[derive(Deserialize, Clone)]
struct ImageURIs {
    art_crop: String,
    border_crop: String,
    large: String,
    normal: String,
    pub png: String,
    small: String,
}

#[derive(Deserialize, Clone)]
struct CardFace {
    object: String,
    name: String,
    mana_cost: Option<String>,
    type_line: String,
    oracle_text: Option<String>,
    colors: Vec<String>,
    defence: Option<String>,
    power: Option<String>,
    toughness: Option<String>,
    loyalty: Option<String>,
    artist: String,
    artist_id: String,
    illustration_id: String,
    flavor_text: Option<String>,
    keywords: Option<Vec<String>>,
    image_uris: ImageURIs
}

#[derive(Deserialize)]
pub struct Scryfall {
    artist: String,
    artist_ids: Vec<String>,
    booster: bool,
    border_color: String,
    card_back_id: Option<String>,
    card_faces: Option<Vec<CardFace>>,
    cardmarket_id: Option<u32>,
    cmc: f32,
    collector_number: String,
    color_identity: Vec<String>,
    colors: Option<Vec<String>>,
    loyalty: Option<String>,
    defence: Option<String>,
    digital: bool,
    edhrec_rank: Option<u32>,
    finishes: Vec<String>,
    flavor_text: Option<String>,
    foil: bool,
    frame: String,
    full_art: bool,
    games: Vec<String>,
    highres_image: bool,
    id: String,
    illustration_id: Option<String>,
    image_status: String,
    image_uris: Option<ImageURIs>,
    keywords: Option<Vec<String>>,
    lang: String,
    layout: String,
    legalities: Legalities,
    mana_cost: Option<String>,
    mtgo_foil_id: Option<u32>,
    mtgo_id: Option<u32>,
    multiverse_ids: Vec<u32>,
    name: String,
    nonfoil: bool,
    object: String,
    oracle_id: String,
    oracle_text: Option<String>,
    oversized: bool,
    penny_rank: Option<u32>,
    power: Option<String>,
    prices: HashMap<String, Option<String>>,
    prints_search_uri: String,
    promo: bool,
    purchase_uris: HashMap<String, String>,
    rarity: String,
    related_uris: HashMap<String, String>,
    released_at: String,
    reprint: bool,
    reserved: bool,
    rulings_uri: String,
    scryfall_set_uri: String,
    scryfall_uri: String,
    set: String,
    set_id: String,
    set_name: String,
    set_search_uri: String,
    set_type: String,
    set_uri: String,
    story_spotlight: bool,
    tcgplayer_id: Option<u32>,
    textless: bool,
    toughness: Option<String>,
    type_line: String,
    uri: String,
    variation: bool,
    watermark: Option<String>,
}
